# All queries with function resolvers must be in the same schema.graphql file, otherwise the queries will be created without resolver function
type Query {
  emptyQuery: String
  # Test method
  echo(msg: String): String @function(name: "nebula-api-${env}-resolver")

  # Search graph
  searchGraph(input: SearchGraphInput!): SearchGraphResult
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Get single node by identity
  getNode(identity: ID!): GraphNodeRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Get single relationship by identity
  getRelationship(identity: ID!): GraphRelationshipRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # List all nodes by label
  listNodes(input: ListNodesInput!): GraphNodeRecords
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # # List relationships by ID
  # listRelationships(input: ListRelationshipsInput!): RelationshipsGraphRecord
  #   @function(name: "nebula-api-${env}-graphResolver")
  #   @auth(rules: [
  #     { allow: public },
  #     { allow: private },
  #   ])

  # Users
  # --------------------------------------------------------------------------------------------
  # Get user by username ID
  getUser(username: ID!): CognitoUser
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Get user by username ID
  findUsers(input: FindUsersInput!): CognitoUserList
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # List all users in organisation
  listUsers(nextToken: String): CognitoUserList
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Connector Credentials
  getConnectorCredentials(id: ID!): ConnectorCredentials
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Manifest
  # TODO funktioniert nicht mit API gateway urls: https://github.com/aws-amplify/amplify-js/issues/9330
  # @http(url: "https://nebula-connector-shopify-dev-meta.s3.eu-west-1.amazonaws.com/manifest.json") # param :service will be replaced automatically
  # TODO ggf. von service zu resource ändern wenn wir das Manifest für anderen arten wiedervwenden, z.b. Apps
  # getManifest(service: ConnectorService!): Manifest
  #   @function(name: "nebula-api-${env}-resolver")
  #   @auth(rules: [
  #     { allow: public },
  #     { allow: private },
  #   ])

  getManifest(service: ConnectorService!): AWSJSON
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  customTest(id: ID!): Test
}

# TODO remove public auth rules
type Mutation {
  emptyMutation: Int

  runPerspective(input: RunPerspectiveInput!): RunPerspectiveResult
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  runConnector(input: RunConnectorInput!): AWSJSON
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Connector Credentials
  createConnectorCredentials(input: CreateConnectorCredentialsInput!): ConnectorCredentials
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  updateConnectorCredentials(input: UpdateConnectorCredentialsInput!): ConnectorCredentials
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  deleteConnectorCredentials(input: DeleteConnectorCredentialsInput!): ConnectorCredentials
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # Node
  createNode(input: CreateNodeInput!): GraphNodeRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  updateNode(input: UpdateNodeInput!): GraphNodeRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  deleteNode(input: DeleteNodeInput!): DeleteNodeRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  # Relationship
  createRelationship(input: CreateRelationshipInput!): GraphRelationshipRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  updateRelationship(input: UpdateRelationshipInput!): GraphRelationshipRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  deleteRelationship(input: DeleteRelationshipInput!): DeleteRelationshipRecord
    @function(name: "nebula-api-${env}-graphResolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # # Organization
  # createOrganization(input: CreateOrganizationInput!): Organization
  #   @function(name: "nebula-api-${env}-resolver")

  # Users
  # --------------------------------------------------------------------------------------------
  # Create a user and assign it to the organizations' cognito group
  createUser(input: CreateUserInput!): CognitoUser
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  # Update a user
  updateUser(input: UpdateUserInput!): CognitoUser
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])
  # Delete a user
  deleteUser(input: DeleteUserInput!): CognitoUser
    @function(name: "nebula-api-${env}-resolver")
    @auth(rules: [
      { allow: public },
      { allow: private },
    ])

  # # Assign user to cognito group
  # assignUser(groupID: ID!, userID: ID!): User
  #   @function(name: "nebula-api-${env}-resolver")
  #   @auth(rules: [
  #     { allow: public },
  #     { allow: private },
  #   ])

}
