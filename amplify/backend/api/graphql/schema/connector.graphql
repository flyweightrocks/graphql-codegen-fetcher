type Connector @model(subscriptions: null)
  @auth(rules: [
    { allow: public },
    { allow: private },
  ]) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String!
  descritpion: String
  # TODO resources feld einfügen mit eigener defintion und feldern für extractor, database, ggf credentials
  resourceName: String! # Connector Resource Name, e.g. "nebula-connector-shopify-dev"
  extractor: String # Extractor ARN, e.g. ARN of Lambda or StepFunction (maybe an URL later on)
  #TODO: database name
  topics: [String!]
  service: ConnectorService!
  active: Boolean
  status: ConnectorStatus!
  secretCredentials: String # Secret ARN of the credentials
  dataSource: String @index(name: "byDataSource", queryField: "getConnectorByDataSource", sortKeyFields: ["id"])
  transformations: [Transformation] @hasMany(indexName: "byConnector", fields: ["id"])
}

type Transformation @model(subscriptions: null)
  @auth(rules: [
    { allow: public },
    { allow: private },
  ]) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  connectorID: ID! @index(name: "byConnector", queryField: "getTransformationsByConnector")
  topics: [String!]!
  schemaEntity: String!
  graphEntityType: GraphEntityType!
  status: TransformationStatus!
  expression: String
  connector: Connector @belongsTo(fields: ["connectorID"])
}

enum ConnectorService {
  AMAZON
  SHOPIFY
}

# TODO status genauer defineren AUTHORIZED, UNAUTHORIZED, DEPRECATED, etc.
# und dann ein zweites Feld für Active, Inactive einführen
enum ConnectorStatus {
  ACTIVE
  INACTIVE
}

enum TransformationStatus {
  ENABLED
  DISABLED
}

enum GraphEntityType {
  NODE
  RELATIONSHIP
}

input RunConnectorInput {
  id: ID!
  topic: String!
  parameters: [RunConnectorParameterInput!]
}

input RunConnectorParameterInput {
  key: String!
  value: String
}

# TODO pipelineResolver mit Cerdentials automatich speichern und lesen
# die authorizatiuon muss dann später für Connector gemacht werden statt auf Credentials spearat
type ConnectorCredentials @aws_cognito_user_pools @aws_api_key @aws_iam {
  id: ID!
  plainCredentials: AWSJSON # key-value-pairs
  secretCredentials: String
}

input CreateConnectorCredentialsInput {
  id: ID!
  plainCredentials: AWSJSON! # key-value-pairs
}

input UpdateConnectorCredentialsInput {
  id: ID!
  plainCredentials: AWSJSON! # key-value-pairs
}

input DeleteConnectorCredentialsInput {
  id: ID!
}
