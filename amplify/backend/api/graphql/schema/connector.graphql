type Connector @model(subscriptions: null)
  @auth(rules: [
    { allow: public },
    { allow: private },
  ]) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  service: ConnectorService!
  name: String!
  topics: [String!]
  status: ConnectorStatus!
  secretCredentials: AWSJSON # result from secretsmanager or any other JSON
  source: String @index(name: "connectorBySource", queryField: "getConnectorBySource") # TODO:rename to bySource
  transformations: [Transformation] @hasMany(indexName: "byConnector", fields: ["id"])
  #TODO: database name
}

type Transformation @model(subscriptions: null)
  @auth(rules: [
    { allow: public },
    { allow: private },
  ]) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  connectorID: ID! @index(name: "byConnector", queryField: "getTransformationsByConnector")
  topics: [String!]!
  schemaEntity: String!
  graphEntityType: GraphEntityType!
  status: TransformationStatus!
  expression: String
  connector: Connector @belongsTo(fields: ["connectorID"])
}

enum ConnectorService {
  AMAZON
  SHOPIFY
}

enum ConnectorStatus {
  ACTIVE
  INACTIVE
}

enum TransformationStatus {
  ENABLED
  DISABLED
}

enum GraphEntityType {
  NODE
  RELATIONSHIP
}

input RunConnectorInput {
  id: ID!
  topic: String!
  parameters: [RunConnectorParameterInput!]
}

input RunConnectorParameterInput {
  key: String!
  value: String
}

type ConnectorManifest {
  version: String
  service: ConnectorService
  credentials: [ConnectorCredentialsField!]
  authorization: ConnectorAuthorization
  topics: [String!]
}

type ConnectorCredentialsField {
  field: String!
  type: ConnectorCredentialsFieldType!
  pattern: String
}

enum ConnectorCredentialsFieldType {
  DOMAIN
  ACCESS_TOKEN
}

type ConnectorAuthorization {
  type: ConnectorAuthorizationType!
  authUrl: String
  authParams: [String!]
  callbackParams: [String!]
}

enum ConnectorAuthorizationType {
  OAUTH
}

# TODO pipelineResolver mit Cerdentials automatich speichern und lesen
# die authorizatiuon muss dann später für Connector gemacht werden statt auf Credentials spearat
type ConnectorCredentials {
  id: ID!
  plainCredentials: AWSJSON! # key-value-pairs
}

# # TODO delete
# input SaveConnectorCredentialsInput {
#   id: ID!
#   plainCredentials: AWSJSON! # key-value-pairs
# }

input CreateConnectorCredentialsInput {
  id: ID!
  plainCredentials: AWSJSON! # key-value-pairs
}

input UpdateConnectorCredentialsInput {
  id: ID!
  plainCredentials: AWSJSON! # key-value-pairs
}

input DeleteConnectorCredentialsInput {
  id: ID!
}
