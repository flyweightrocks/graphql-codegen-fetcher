type Perspective @model(subscriptions: null)
@auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String!
  description: String
  type: PerspectiveType!
  query: String!
  parameters: [PerspectiveParameter!]
  # status: PerspectiveStatusType
}

type PerspectiveParameter {
  key: String!
  name: String!
  type: PerspectiveParameterType!
  definition: String! #JSON object
  value: String
}

# #TODO: separate resolver functions
# extend type Query {
#   runPerspective(input: RunPerspectiveInput!): String
#     @function(name: "nebula-api-${env}-resolver")
# }

# RunPerspective
input RunPerspectiveInput {
  id: ID!
  parameters: [RunPerspectiveParameterInput!]
}

input RunPerspectiveParameterInput {
  key: String!
  type: PerspectiveParameterType!
  value: String
}

# Result for Runprspective
type RunPerspectiveResult {
  records: AWSJSON! # TODO array AWSJSON zur√ºckgeben
}

enum PerspectiveType {
  GRAPH
  TABLE
  CHART
  METRIC
}

enum PerspectiveParameterType {
  STRING
  NUMBER
  DATE
  DATETIME
  TIME
}

enum PerspectiveParameterDateOption {
  CUSTOM
  CURRENT_DAY
  BEGIN_OF_MONTH
  END_OF_MONTH
  BEGIN_OF_YEAR
  END_OF_YEAR
}
