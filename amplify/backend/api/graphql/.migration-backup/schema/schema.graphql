# Die Nodes und Relationships als JSON innerhalb des Schema Models speichern anstatt als eigene Models mit Tabelle
# Das Anlegen/Ändern/Löschen von Nodes/Rels wird dadurch einfacher, weil kein abgleich der neuen und alten Nodes/Rels
# gemacht werden muss um das Delta zu ermitteln und dann Create/Update/Delete Mutations hintereinander auszuführen
# Stattdessen kann das Schema einmal angelegt werden und msus danach nur noch geändert werden.
type Schema @model(subscriptions: null)
  @auth(rules: [{ allow: public }])
{
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
	# nodes: [SchemaNode!] @connection(keyName: "bySchema", fields: ["id"])
	# relationships: [SchemaRelationship!] @connection(keyName: "bySchema", fields: ["id"])
  nodes: [SchemaNode!]
	relationships: [SchemaRelationship!]
}

type SchemaNode {
  id: ID!
  # labels: [SchemaNodeLabel]!
  # Label und Color voneinander trennen weil es später möglich sein muss
  # eine Node zu definieren mit mehreren Labels und diesen dann eine Color zuzuweisen
  # d.h. Node mit Label Marketplace hat Color=Rot, aber Node mit Marketplace+Amazon hat Color=Orange
  label: String! #TODO: später auf labels wechseln, aber momentan zu komplex umzusetezn
  properties: [SchemaProperty!]
  idSelector: [String!]
  descriptionSelector: [String!]
  avatarSelector: String
  avatarColor: String!
}

type SchemaRelationship {
  id: ID!
  # Die Verbindung von StartNode->Rel->EndNode muss erfasst werden
  # weil es einen Rel-Type mehrmals geben kann, z.B. :CONTAINS
  # Die genaue Auspärgung hängt dann von den verbundenen Nodes ab
  startNodeID: ID!
  endNodeID: ID!
  type: String! #TODO: eigener Typ SchemaReltype mit description?
  properties: [SchemaProperty!]
  descriptionSelector: [String!]
}

# type SchemaNode @model
#   @auth(rules: [{ allow: public }])
#   @key(name: "bySchema", fields: ["schemaID"], queryField: "getSchemaNodesBySchema")
# {
#   id: ID!
#   schemaID: ID!
#   # labels: [SchemaNodeLabel]!
#   label: SchemaNodeLabel! #TODO: später auf labels wechseln, aber momentan zu komplex umzusetezn
#   properties: [SchemaProperty!]
#   idSelector: [String!]
#   descriptionSelector: [String!]
#   avatarSelector: String
#   outgoingRelationships: [SchemaRelationship!] @connection(keyName: "byStartNode", fields: ["id"])
#   incomingRelationships: [SchemaRelationship!] @connection(keyName: "byEndNode", fields: ["id"])
# }

# type SchemaRelationship @model
#   @auth(rules: [{ allow: public }])
#   @key(name: "bySchema", fields: ["schemaID"], queryField: "getSchemaRelationshipsBySchema")
#   @key(name: "byStartNode", fields: ["startNodeID"], queryField: "getOutgoingSchemaRelationships")
#   @key(name: "byEndNode", fields: ["startNodeID"], queryField: "getIncomingSchemaRelationships")
# {
#   id: ID!
#   schemaID: ID!
#   # Die Verbindung von StartNode->Rel->EndNode muss erfasst werden
#   # weil es einen Rel-Type mehrmals geben kann, z.B. :CONTAINS
#   # Die genaue Auspärgung hängt dann von den verbundenen Nodes ab
#   startNodeID: ID!
#   startNode: SchemaNode @connection(fields: ["startNodeID"])
#   endNodeID: ID!
#   endNode: SchemaNode @connection(fields: ["endNodeID"])
#   type: String! #TODO: eigener Typ SchemaReltype mit description?
#   properties: [SchemaProperty!]
#   descriptionSelector: [String!]
# }

# type SchemaNodeLabel {
#   label: String!
#   color: String!
#   #description: String!
# }

type SchemaProperty {
  key: String!
  name: String!
  #description: String!
  type: SchemaPropertyType!
}

enum SchemaPropertyType {
  STRING
  NUMBER
  DATE
  DATETIME
  TIME
  BOOLEAN
  CURRENCY
  UNDEFINED
}
